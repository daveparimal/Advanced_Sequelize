1) Install sequelize
npm init -y # to create node project with package.json
npm install --save sequelize
npm install --save express
npm install --save-dev nodemon
npm install --save pg pg-hstore # Postgres connectors installation

2) Install sequalize-cli 
Commnd line tool. Helps create models and stuff
npm install -g --save-dev sequelize-cli

3) Create basic folder structure for backend with below command
sequelize init

4) Understanding folder structure
/config/config.json --> Json containing username, password, database name, database type like mysql, postgres, etc.
/models/index.js
Helps connect to database and provides and object to communicate

5) Useful commands for sequelize
To create database:
sequelize db:create 
This will create database with the details available in config.json

To create model:
E.g.:
sequelize model:generate --name User --attributes name:string,email:string,role:string
sequelize model:generate --name <table_name> --attributes <column_name>:<column_type>,<column_name>:<column_type>, ....

To delete database:
sequalize db:drop

To start migrations
sequelize db:migrate
This command will create a table in database called SequelizeMeta which keeps tracks of your migrations

To see status of migrations
sequelize db:migrate:status

To revert previous migration. One migration only.
sequelize db:migrate:undo

To revert all previous migrations. 
sequelize db:migrate:undo:all

6) Start server
nodemon app.js

7) To remove/rename created at updated at in sequelize
class Foo extends Model {}
Foo.init({ /* attributes */ }, {
  sequelize,

  // don't forget to enable timestamps!
  timestamps: true,

  // I don't want createdAt
  createdAt: false,

  // I want updatedAt to actually be called updateTimestamp
  updatedAt: 'updateTimestamp'
});

8) To add hardcoded data into the table, this could be added in the app.js reqeusts code. 

const data = await Users.build({name:"parimal dave", email:"test@gmail.com", gender:"male"});
await data.save()

If we want to build and save data in one go we user
const data = await Users.create({name:"parimal dave", email:"test@gmail.com", gender:"male"});

If we want to update the name
data.name = "dummy" // data is the instance from the one creted above
data.save() // the row would be updated

If we want to delete the same
data.destroy() 

// Truncate / empty the table 
const data = Users.destroy({truncate: true});

// Bulk Insert 
const data = await Users.bulkCreate([
  {name: "parimal", email:"test@gmail.com", gender:"male"},
  {name: "parimal", email:"test@gmail.com", gender:"male"}
  {name: "parimal", email:"test@gmail.com", gender:"male"}
  ])

// If you want to push data only related to some fields in database:
E.g. if you want to push only gender and email

const data = await Users.create({name:"parimal dave", email:"test@gmail.com", gender:"male"}, {fields:['gender', 'email']});


-------------------------------------------------------------------------------------------------------------------------------------------------------------
Select Queries
**********************
// Get all data from data
const data = await User.findAll()

// Get first data
const data = await User.findOne()

// Get only couple of coulmns from data
const data = await User.findAll({
  attributes:['name','email']
})

// Change name of columns after retrieving
const data = await User.findAll({
  attributes:['name', ['email', 'emailId']]
})

// Count the number of items retrieved.
Make sure sequelize is imported:
const { sequelize } = require("./models");

Then
const data = await User.findAll({
  attributes:[
    'name', 
    ['email', 'emailId'],
    [sequelize.fn('Count', sequelize.col('email')), 'email_count']
    ],
    group: ["name", "email"],
}) 

So for [sequelize.fn('Count', sequelize.col('email')), 'email_count']
first parameter is function, 
  Inside function first parameter is "which function to apply like count/concat", 
  and second parameter inside function is column name 
second parameter is column name

Also we need to group by to make this work

To append a string to each item of column the sequelize function in attribute should be:
[sequelize.fn('CONCAT', sequelize.col('email'), "test"), 'email_count']

// Exclude some columns in response
const data = await User.findAll({
  attributes:{exclude:['createdAt','modifiedAt']}
}) 

// include some columns in response
const data = await User.findAll({
  attributes:{
    exclude:['createdAt','modifiedAt'],
    include:[
      [sequelize.fn('CONCAT', sequelize.col('name'), "dave"), 'full_name']
    ]
  }
})  

Condition Queries
********************************
// basic find
const data = await User.findAll({
  where: {id: 1}
})

// operator
Make sure you import Op at the top.
const { sequelize, Op } = require("./models");
then 
const data = await User.findAll({
  where: {
    id:{
      [Op.eq]:2 // id equal to 2
    },
    email:{
      [Op.like]:"%@gmail.com" // prefixed with anything but ends with @gmail.com
    }
  }
})

For more operators and functionality see operators section in below link https://sequelize.org/master/manual/model-querying-basics.html


Group By / Order By / Limit
**********************************
// Order By, grouby and limit
const data = await User.findAll({
  where: {
    id:{
      [Op.gt]:2 // id equal to 2
    },
    email:{
      [Op.like]:"%@gmail.com" // prefixed with anything but ends with @gmail.com
    }
  },
  orderBy:[
    [name, 'DESC'],
    [email, 'DESC']
  ],
  group:['name', 'email']
  limit:2, // will limit to only 2 records
  offset:1 // catch skip first record
})

// Get only count
const data = await User.count()

Finders
***************************************
// find by primary key
const data = await User.findByPk(3)

// find and count all
const data = await User.findAndCountAll({
  where:{
    email:{
      [Op.like]:"%@gmail.com"
    }
  }
}) 

// find or create.
cosnt [data, created] = await User.findOrCreate({
  where:{
    name:"dummy",
  },
  defaults:{
    name:"test",
    email:"test@gmail.com",
    gender:"Male"
  }
})

Here it will return 2 things, you will get the data inside "data" variable and a boolean value if it is created. Either true or false.

Setters/Geeters
*********************************************************************
Getter - get from db, do something to that data and then send backend.
Seetter - data will be manipultated first and then stored in database. Like hashing of passwords.
Set it where model is defined.

// setter and getters
  User.init(
    {
      name: {
        type: DataTypes.STRING,
        set(value) {
          this.setDataValue("name", value + "Setter Dave");
        },
      },
      email: {
        type: DataTypes.STRING,
        get() {
          return this.getDataValue("email").toUpperCase();
        },
      },
      gender: DataTypes.STRING,
    },
    {
      sequelize,
      tableName: "users",
      modelName: "User",
    }
  );

  Validations and constraints 
  **************************************************************
  Applied on model.
  Data should be valid, should be unique, etc.

  For constraints check
  // constraints added later for creating customized migration file.

  For Validations check
  // validations added later for creating customized migration file.

  Running Raw queries
  *****************************************************
  Needs QueryType on top to run
  const { QueryType } = require("sequelize");
  const users = await db.sequelize.query("SELECT * from users")
  There are other parameter that go as second parameter in query function. Check documentation for more details.
  check
  // raw query example

  Associations - One to one
  Associations- One to many
  ********************************************************
  If user has one post. And a post belong to one user. Then below are the functions we need to add in static associate:

    In User model:
    this.hasOne(Posts, { foreignKey: "user_id",});
    In Posts Model:
    this.belongsTo(User, { foreignKey: "user_id" });

    If we want to attach user details to post list, then only foreign key is needed in post model.

  If a user has many post. Then :
    In User model:
    this.hasMany(Posts, { foreignKey: "user_id",});
    In Posts Model:
    this.belongsTo(User, { foreignKey: "user_id" });  

    check code 
    // one to one
    // one to many

PLEASE NOTE: Defining One to One or One does not mean that we cannot add posts with same user_id. The database will allow (unless unique is set).
The way we can differentiate this is, if Find all user api call is made and if there more than one posts attached to a user. Then one to one use case the response will be:
[{name:xx, post:{name:xx}}, {name:xx, post:{name:yy}}]
while in case of one to many, response will be:
{name:xx, post:[{name:xx}, {name:yy}]}

// Associations - Many to Many
************************************************************
A post has many tags associated to it like sports, latest, popular and tags can be associated to many posts. This is why many to many is considered.
In this case a seperate table is created usually to manage the mappings with ID. In this case a table called post_tags was created which had mappings of various posts with IDs

check code 
// many to many

Scope
***********************************************************
Used to create reusable code for querying. If we apply a scope, then then code will run 
eveytime a query is made on that model.
check code
// scopes example

One to Many PolyMorphic
************************************************************
sequelize model:generate --name Comment --attributes comment:string,asset_id:integer,asset_type:integer
sequelize model:generate --name Image --attributes title:string,image_url:string
sequelize model:generate --name Video --attributes title:string,video_url:string
sequelize db:migrate

check code
// for One to Many PolyMorphic

Many to Many PolyMorphic
***********************************************************
sequelize model:generate --name ImageVideoTag --attributes tag_id:integer,asset_type:string,asset_id:integer

check code
// for Many to Many PolyMorphic

Lazy and Eager Loading
***********************************************************
  const data = await Video.findAll({
    include: [tags],
  });

  In this case when you include something in the query, this is eager loading

  Now,

  const data = await User.findOne({ where: { id: 1 } });
  const posts = await data.getPosts();
  const response = {
    user: data,
    posts: posts,
  };

  In thisc case you use the response from first to query the second. THe format is use get<ModelName>. 
  In this case we are trying to find number of posts which this user has posted, so it is getPosts()

  Check code
  // lazy loading
  // eager loading

  Paranoid
  *******************************************
  Used for doing soft delete, that means record stays in table but is not returned on querying
  done by setting paranoid true in the table

  E.g. in models
    PostTags.init(
    {
      post_id: DataTypes.INTEGER,
      tag_id: DataTypes.INTEGER,
    },
    {
      sequelize,
      paranoid: true,
      tableName: "post_tags",
      modelName: "PostTags",
      deletedAt:'destroyTime'
    }
  );

  Setting paranoid: true, will add a column called deletedAt in your model. If you want to rename it use deletedAt:'destroyTime'

  Upon deletion on any row in a table, deletedAt rown will have time when its deleted, else it is null

  We can also restore data, instead of use PostTags.delete queruy use PostTags.restore with the proper id of row that needs to be restored.

  Transactions
  ************************************************************
  Transactions means if data is not updated properly in table then that data will be rolled back.
  Example if order table is updated but payments table is not getting updated due to some error then both the tables data will be rolled back.

  Check code
  // transaction examples 


  Hooks 
  ************************************************************
  Used to do things like:
  1) Before data is inserted
  2) After data is inserted
  3) Before data is validated
  4) After data is validated,

  etc.. there are a lot of Hooks.

  E.g. in models
      User.init(
    {
      name: DataTypes.STRING,
      email: DataTypes.STRING,
    },
    {
      sequelize,
      tableName: "post_tags",
      modelName: "PostTags",
      hooks: {
          beforeValidate: (user, option) => { // user is the data that is being passed.
          user.name = 'dummy test data'
        }
      }
    }
  );

  Basically used, if we want to do followup task everytime data is updated in a table

  check code
  // hooks added

  Migrations
  ************************************************************
  Tutorial
  https://www.youtube.com/watch?v=a5Wh_LDXtLc

  Query Interface Link
  https://sequelize.org/master/class/lib/dialects/abstract/query-interface.js~QueryInterface.html

check for code with comment
  // Custom Migrations Demo

Seeders
**************************************************************
To create new sequelize script:
sequelize seed:generate --name tags-add

To run all seeder script:
sequelize db:seed:all

To run seeder script
sequelize db:seed <see_file_name.js>

To undo seeder script
sequelize db:seed:undo:all

check code
// seeder up
// seeder down

Try/catch error handling
*******************************************************************
try {
  const data = await User.create({name:"test", email"test@gmail.com", gender:"male"})
} catch (e) {
  const messages = {};
  e.error.forEach((error) => {
    let message;
    switch(error.validatorKey) {
      case "not_unique":
      message = "Duplicate Email"
      break;

      case "isIn:
      message = "Gender not in list"
      break; 

      case "equals:
      message = "Gender not male"
      break;     
    }
  messages[error.path] = message

  console.log(messages);
  // print default message from backend
  // console.log(error.message)
  })
}