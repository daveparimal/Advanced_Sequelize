1) Install sequelize
npm init -y # to create node project with package.json
npm install --save sequelize
npm install --save express
npm install --save-dev nodemon
npm install --save pg pg-hstore # Postgres connectors installation

2) Install sequalize-cli 
Commnd line tool. Helps create models and stuff
npm install -g --save-dev sequelize-cli

3) Create basic folder structure for backend with below command
sequelize init

4) Understanding folder structure
/config/config.json --> Json containing username, password, database name, database type like mysql, postgres, etc.
/models/index.js
Helps connect to database and provides and object to communicate

5) Useful commands for sequelize
To create database:
sequelize db:create 
This will create database with the details available in config.json

To create model:
E.g.:
sequelize model:generate --name User --attributes name:string,email:string,role:string
sequelize model:generate --name <table_name> --attributes <column_name>:<column_type>,<column_name>:<column_type>, ....

To delete database:
sequalize db:drop

To start migrations
sequelize db:migrate
This command will create a table in database called SequelizeMeta which keeps tracks of your migrations

To see status of migrations
sequelize db:migrate:status

To revert previous migration. One migration only.
sequelize db:migrate:undo

To revert all previous migrations. 
sequelize db:migrate:undo:all

6) Start server
nodemon app.js

7) To remove/rename created at updated at in sequelize
class Foo extends Model {}
Foo.init({ /* attributes */ }, {
  sequelize,

  // don't forget to enable timestamps!
  timestamps: true,

  // I don't want createdAt
  createdAt: false,

  // I want updatedAt to actually be called updateTimestamp
  updatedAt: 'updateTimestamp'
});

8) To add hardcoded data into the table, this could be added in the app.js reqeusts code. 

const data = await Users.build({name:"parimal dave", email:"test@gmail.com", gender:"male"});
await data.save()

If we want to build and save data in one go we user
const data = await Users.create({name:"parimal dave", email:"test@gmail.com", gender:"male"});

If we want to update the name
data.name = "dummy" // data is the instance from the one creted above
data.save() // the row would be updated

If we want to delete the same
data.destroy() 

// Truncate / empty the table 
const data = Users.destroy({truncate: true});

// Bulk Insert 
const data = await Users.bulkCreate([
  {name: "parimal", email:"test@gmail.com", gender:"male"},
  {name: "parimal", email:"test@gmail.com", gender:"male"}
  {name: "parimal", email:"test@gmail.com", gender:"male"}
  ])

// If you want to push data only related to some fields in database:
E.g. if you want to push only gender and email

const data = await Users.create({name:"parimal dave", email:"test@gmail.com", gender:"male"}, {fields:['gender', 'email']});


-------------------------------------------------------------------------------------------------------------------------------------------------------------
Select Queries
**********************
// Get all data from data
const data = await User.findAll()

// Get first data
const data = await User.findOne()

// Get only couple of coulmns from data
const data = await User.findAll({
  attributes:['name','email']
})

// Change name of columns after retrieving
const data = await User.findAll({
  attributes:['name', ['email', 'emailId']]
})

// Count the number of items retrieved.
Make sure sequelize is imported:
const { sequelize } = require("./models");

Then
const data = await User.findAll({
  attributes:[
    'name', 
    ['email', 'emailId'],
    [sequelize.fn('Count', sequelize.col('email')), 'email_count']
    ],
    group: ["name", "email"],
}) 

So for [sequelize.fn('Count', sequelize.col('email')), 'email_count']
first parameter is function, 
  Inside function first parameter is "which function to apply like count/concat", 
  and second parameter inside function is column name 
second parameter is column name

Also we need to group by to make this work

To append a string to each item of column the sequelize function in attribute should be:
[sequelize.fn('CONCAT', sequelize.col('email'), "test"), 'email_count']

// Exclude some columns in response
const data = await User.findAll({
  attributes:{exclude:['createdAt','modifiedAt']}
}) 

// include some columns in response
const data = await User.findAll({
  attributes:{
    exclude:['createdAt','modifiedAt'],
    include:[
      [sequelize.fn('CONCAT', sequelize.col('name'), "dave"), 'full_name']
    ]
  }
})  

Condition Queries
********************************
// basic find
const data = await User.findAll({
  where: {id: 1}
})

// operator
Make sure you import Op at the top.
const { sequelize, Op } = require("./models");
then 
const data = await User.findAll({
  where: {
    id:{
      [Op.eq]:2 // id equal to 2
    },
    email:{
      [Op.like]:"%@gmail.com" // prefixed with anything but ends with @gmail.com
    }
  }
})

For more operators and functionality see operators section in below link https://sequelize.org/master/manual/model-querying-basics.html


Group By / Order By / Limit
**********************************
// Order By, grouby and limit
const data = await User.findAll({
  where: {
    id:{
      [Op.gt]:2 // id equal to 2
    },
    email:{
      [Op.like]:"%@gmail.com" // prefixed with anything but ends with @gmail.com
    }
  },
  orderBy:[
    [name, 'DESC'],
    [email, 'DESC']
  ],
  group:['name', 'email']
  limit:2, // will limit to only 2 records
  offset:1 // catch skip first record
})

// Get only count
const data = await User.count()

Finders
***************************************
// find by primary key
const data = await User.findByPk(3)

// find and count all
const data = await User.findAndCountAll({
  where:{
    email:{
      [Op.like]:"%@gmail.com"
    }
  }
}) 

// find or create.
cosnt [data, created] = await User.findOrCreate({
  where:{
    name:"dummy",
  },
  defaults:{
    name:"test",
    email:"test@gmail.com",
    gender:"Male"
  }
})

Here it will return 2 things, you will get the data inside "data" variable and a boolean value if it is created. Either true or false.